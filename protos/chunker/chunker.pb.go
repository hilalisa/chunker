// Code generated by protoc-gen-go.
// source: protos/chunker/chunker.proto
// DO NOT EDIT!

/*
Package chunker is a generated protocol buffer package.

It is generated from these files:
	protos/chunker/chunker.proto

It has these top-level messages:
	Chunk
*/
package chunker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Chunk struct {
	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Chunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func init() {
	proto.RegisterType((*Chunk)(nil), "chunker.Chunk")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chunker service

type ChunkerClient interface {
	Chunker(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (Chunker_ChunkerClient, error)
}

type chunkerClient struct {
	cc *grpc.ClientConn
}

func NewChunkerClient(cc *grpc.ClientConn) ChunkerClient {
	return &chunkerClient{cc}
}

func (c *chunkerClient) Chunker(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (Chunker_ChunkerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chunker_serviceDesc.Streams[0], c.cc, "/chunker.Chunker/Chunker", opts...)
	if err != nil {
		return nil, err
	}
	x := &chunkerChunkerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chunker_ChunkerClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type chunkerChunkerClient struct {
	grpc.ClientStream
}

func (x *chunkerChunkerClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Chunker service

type ChunkerServer interface {
	Chunker(*google_protobuf.Empty, Chunker_ChunkerServer) error
}

func RegisterChunkerServer(s *grpc.Server, srv ChunkerServer) {
	s.RegisterService(&_Chunker_serviceDesc, srv)
}

func _Chunker_Chunker_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChunkerServer).Chunker(m, &chunkerChunkerServer{stream})
}

type Chunker_ChunkerServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type chunkerChunkerServer struct {
	grpc.ServerStream
}

func (x *chunkerChunkerServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

var _Chunker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chunker.Chunker",
	HandlerType: (*ChunkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chunker",
			Handler:       _Chunker_Chunker_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/chunker/chunker.proto",
}

func init() { proto.RegisterFile("protos/chunker/chunker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x4f, 0xce, 0x28, 0xcd, 0xcb, 0x4e, 0x2d, 0x82, 0xd1, 0x7a, 0x60, 0x61, 0x21,
	0x76, 0x28, 0x57, 0x4a, 0x3a, 0x3d, 0x3f, 0x3f, 0x3d, 0x27, 0x55, 0x1f, 0x2c, 0x9c, 0x54, 0x9a,
	0xa6, 0x9f, 0x9a, 0x5b, 0x50, 0x52, 0x09, 0x51, 0xa5, 0x24, 0xcb, 0xc5, 0xea, 0x0c, 0x52, 0x27,
	0x24, 0xc2, 0xc5, 0x0a, 0xd6, 0x20, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x13, 0x04, 0xe1, 0x18, 0x39,
	0x70, 0xb1, 0x3b, 0x43, 0x8c, 0x11, 0x32, 0x45, 0x30, 0xc5, 0xf4, 0x20, 0x46, 0xea, 0xc1, 0x8c,
	0xd4, 0x73, 0x05, 0x19, 0x29, 0xc5, 0xa7, 0x07, 0x73, 0x02, 0x58, 0xa5, 0x12, 0x83, 0x01, 0xa3,
	0x93, 0x71, 0x94, 0x61, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x56,
	0x7e, 0x46, 0x62, 0x5e, 0x52, 0x51, 0x62, 0x5e, 0x4a, 0x46, 0x7e, 0x51, 0x71, 0x09, 0xdc, 0xe9,
	0xa8, 0x3e, 0x49, 0x62, 0x03, 0xf3, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x14, 0xdc, 0xe9,
	0xc7, 0xe2, 0x00, 0x00, 0x00,
}
